Event:FormSubmit

<aura:event type="COMPONENT" description="Event template" >
	<aura:attribute name="formData" type="Object" />

</aura:event>


==================================================================
Event:launchNewBoatForm

<aura:event type="COMPONENT" description="Event template" >
	<aura:attribute name="boatTypeId" type="String" />

</aura:event>

================================
Event:PlotMapmarker

<aura:event type="APPLICATION" description="Event template" >
	<aura:attribute name="sObjectId" type="String" />
    <aura:attribute name="lat" type="String" />
    <aura:attribute name="long" type="String" />
    <aura:attribute name="label" type="String" />

</aura:event>

==================

FiveStarrating

<aura:component >
    <ltng:require styles="{!$Resource.fivestar + '/rating.css'}"
                  scripts="{!$Resource.fivestar + '/rating.js'}"
                  afterScriptsLoaded="{!c.afterScriptsLoaded}" />
    
    <aura:handler name="change" value="{!v.value}" action="{!c.onValueChange}"/>
    
    <aura:attribute name="value" type="Integer" default="0" />
    <aura:attribute name="readonly" type="Boolean" default="false"/>
    
    
    <ul aura:id="ratingarea" class="{!v.readonly  ? 'readonly c-rating' : 'c-rating'}">        
        
    </ul>
</aura:component>


FivestarratingController.js

({
    afterScriptsLoaded : function(component, event, helper) {
        
        var domEl = component.find("ratingarea").getElement();
        var currentRating = component.get("v.value");
        var readOnly = component.get("v.readonly");
        
        var maxRating = 5;
        
        var callback = function(rating) {
            component.set('v.value',rating);
        }
        component.ratingObj = rating(domEl,currentRating,maxRating,callback,readOnly); 
    },
    
    onValueChange: function(component,event,helper) {
        if (component.ratingObj) {
            var value = component.get('v.value');
            component.ratingObj.setRating(value,false);
        }
    }
    
})

=================================

BoatReviews

<aura:component controller="BoatReviews" implements="force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId,forceCommunity:availableForAllPageTypes"
                access="global" >
    
    <aura:attribute name="boat" type="Boat__c"/>
    <aura:attribute name="boatReviews" type="BoatReview__c[]" access="private"/>
    <aura:attribute name="toshow" type="Boolean"/>
    
    <aura:handler name="Init" value="{!this}" action="{!c.doInit}"/>
    <aura:handler name="change" value="{!v.boat}" action="{!c.doInit}"/>
    
    <aura:method name="refresh" action="{!c.doInit}">
    </aura:method>
    
    
    <aura:if isTrue="{!v.toshow}">
        <div class="mainWrap">
            <ui:scrollerWrapper class="sWrapTest">
                <aura:iteration items="{!v.boatReviews}" var="BoatReview">
                    <div class="slds-feed">
                        <ul class="slds-feed__list">
                            <li class="slds-feed__item">
                                <article class="slds-post">
                                    <header class="slds-post__header slds-media">
                                        <div class="slds-media__figure">
                                            <a href="javascript:void(0);" class="slds-avatar slds-avatar_circle slds-avatar_large">
                                                <img alt="Jason Rodgers" src="{!v.boatReviews.CreatedBy.SmallPhotoUrl}" title="Jason Rodgers avatar" />
                                            </a>
                                        </div>
                                        <div class="slds-media__body">
                                            <div class="slds-grid slds-grid_align-spread slds-has-flexi-truncate">
                                                <p><a href="javascript:void(0);" title="Jason Rodgers" onclick="{!c.onUserInfoClick}" data-userid="{!boatReview.CreatedBy.Id}">{!v.BoatReview.CreatedBy.Name}</a> — <a href="javascript:void(0);" title="Design Systems">{!v.BoatReview.CreatedBy.CompanyName}</a></p>
                                            </div>
                                            <p class="slds-text-body_small"><a href="javascript:void(0);" title="Click for single-item view of this post" class="slds-text-link_reset">{!v.BoatReview.CreatedDate}</a></p>
                                        </div>
                                    </header>
                                    <div class="slds-post__content slds-text-longform">
                                        <p>{!v.BoatReview.Comment__c}</p>
                                    </div>
                                    <footer class="slds-post__footer">
                                        <ul class="slds-post__footer-meta-list slds-list_horizontal slds-has-dividers_right slds-text-title">
                                            <li class="slds-col slds-item slds-m-right_medium">
                                                <c:FiveStarRating aura:id="FiveStarRating" value="{!v.BoatReview.Rating__c}" readonly="true"/> 
                                            </li>
                                        </ul>
                                    </footer>
                                </article>
                            </li>
                        </ul>
                    </div>
                </aura:iteration>
                
            </ui:scrollerWrapper>
        </div>
        <aura:set attribute="else">
            <aura:if isTrue="{!v.boatReviews.length==0}">
                <lightning:layoutItem class="slds-align_absolute-center" flexibility="auto" padding="around-small">
                    <ui:outputText value="No reviews available" />
                </lightning:layoutItem>
            </aura:if>
        </aura:set>
    </aura:if> 
    
    
    
    
</aura:component>

Controller.js

({
    doInit : function(component, event, helper) {
        helper.onInit(component, event, helper);
        
    },
    
    onUserInfoClick : function(component, event, helper) {
        var userId = event.currentTarget.getAttribute("data-userid");
        var navEvt = $A.get("e.force:navigateToSObject");
        navEvt.setParams({
            "recordId" : userId,
        });
        navEvt.fire()
        
    }
    
    
})

Helper.js

({
    onInit : function() {
        var action = component.get("c.getAll");
        var temp = component.get("v.boat");
        action.setParams({
            "boatId": temp.id
        });
        action.setCallback(this, function(response){
            var state = response.getState();
            if (state === "SUCCESS") {
                var tempval = response.getReturnValue();
                if(tempval != 'null'){
                    component.set("v.boatReviews",tempval);
                    component.set("v.toshow",true);
                    //alert("Created the new Boat Type");    
                }else{
                    component.set("v.toshow",false);
                }
                
            }
        });
        $A.enqueueAction(action);  
    }
})

css

.THIS .sWrapTest {
    height:250px;
    width:100px;
}

Apex

public class BoatReviews {
	@AuraEnabled
    public static List<BoatReview__c> getAll(Id boatId){
        List<BoatReview__c> toSendCampList = new List<BoatReview__c>();
        toSendCampList = [SELECT Id, Name,Comment__c, Rating__c,CreatedDate,LastModifiedDate,CreatedBy.Name,
                          CreatedBy.SmallPhotoUrl,CreatedBy.CompanyName FROM BoatReview__c where id=:boatId];
       
        return toSendCampList;
    }
}

=================================================

AddboatReview

<aura:component implements="force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId,forceCommunity:availableForAllPageTypes,force:lightningQuickAction"
                access="global" >
    
    
    <aura:attribute name="boat" type="Boat__c"  />
    <aura:attribute name="review" type="BoatReview__c" access="private" />
    <aura:attribute name="boatReview" type="BoatReview__c" access="private" />
    <aura:attribute name="recordError" type="String" access="private" />
    
    <aura:handler name="onInit" value="{!this}" action="{!c.doInit}"/>
    <aura:registerEvent name="boatReviewAdded" type="c:BoatReviewAdded"/>
    
    <force:recordData aura:id="service"
                      layoutType="FULL"
                      fields="Id,Name,Comment__c,Boat__c"
                      mode="EDIT"
                      targetRecord="{!v.review}"
                      targetFields="{!v.boatReview}"
                      targetError="{!v.recordError}"
                      recordUpdated="{!c.onRecordUpdated}"/>
    
    <lightning:layout verticalAlign="start" multipleRows="true">
        
        <Lightning:layoutItem flexibility="auto" padding="around-small">
            <lightning:input name="Title" label="Title" value="{!v.boatReview.Name}" />
        </Lightning:layoutItem>
        
        <Lightning:layoutItem flexibility="auto" padding="around-small">
            <lightning:inputRichText aura:id="description" title="description"
                                     disabledCategories="FORMAT_FONT"
                                     value="{!v.boatReview.Comment__c}"/>        
        </Lightning:layoutItem>
        
        <Lightning:layoutItem flexibility="auto" padding="around-small">
            <c:FiveStarRating aura:id="FiveStarRating" value="{!v.boatReview.Rating__c}" readonly="false"/> 
        </Lightning:layoutItem>
        
        <Lightning:layoutItem flexibility="auto" padding="around-small">
            <lightning:button iconName="utility:save" onclick="{!c.onSave}" label="Submit"/>
        </Lightning:layoutItem>
        
    </lightning:layout>
</aura:component>

Controller.js

({
    onSave : function(component, event, helper) {
        var recordLoader = component.find("service");
        recordLoader.saveRecord($A.getCallback(function(saveResult) {
            if (saveResult.state === "ERROR") {
                var errMsg = JSON.stringify(saveResult.error);
                
                alert(errMsg);
                // saveResult.error is an array of errors,
                // so collect all errors into one message
                for (var i = 0; i < saveResult.error.length; i++) {
                    errMsg += saveResult.error[i].message + "\n";
                }
                component.set("v.recordError", errMsg);
            } else{
                var resultsToast = $A.get("e.force:showToast");
                resultsToast.setParams({
                    "title": "Saved!!",
                    "message": "The record was Saved."
                });
                resultsToast.fire();
                
                alert("Record is Saved!!");
                
                
                var cmpEvent = $A.get("e.c.BoatReviewAdded");
                cmpEvent.fire();
                
                var boatReviewAddedEvent = component.getEvent("boatReviewAdded");
      			boatReviewAddedEvent.fire();
                
                
                //cmp.set("v.recordSaveError", "");
            }
        }));
        helper.onInit(component, event, helper);
    },
    
    onRecordUpdated: function(component, event, helper) {
        var eventParams = event.getParams();
        if(eventParams.changeType === "CHANGED") {
            // get the fields that changed for this record
            var changedFields = eventParams.changedFields;
            console.log('Fields that are changed: ' + JSON.stringify(changedFields));
            // record is changed, so refresh the component (or other component logic)
            var resultsToast = $A.get("e.force:showToast");
            resultsToast.setParams({
                "title": "Saved",
                "message": "The record was updated."
            });
            resultsToast.fire();
            
        } else if(eventParams.changeType === "LOADED") {
            // record is loaded in the cache
        } else if(eventParams.changeType === "REMOVED") {
            // record is deleted and removed from the cache
        } else if(eventParams.changeType === "ERROR") {
            // there’s an error while loading, saving or deleting the record
        }
    },
    
    doInit : function(component, event, helper) {
        component.find("service").getNewRecord(
            "BoatReview__c", 
            null,       
            false,     
            $A.getCallback(function() {          
                var rec = component.get("v.boatReview");      
                var error = component.get("v.recordError");
                if(error || (rec === null)) {
                    console.log("Error initializing record template: " + error);
                    return;
                }
                else {               
                    rec.Boat__c = component.get('v.boat').Id;
                    component.set('v.boatReview', rec);
                }                
            })
        );
    }
})

helper.js

({
    onInit : function(component, event, helper) {
        // Prepare a new record from template
        component.find("service").getNewRecord(
            "BoatReview__c",
            null,
            false,
            $A.getCallback(function() {
                var rec = component.get("v.boatReview");
                var error = component.get("v.recordError");
                console.log('hey', JSON.stringify(rec));
                
                if (error || (rec === null)) {
                    console.log("Error initializing record template: " + error);
                } else {
                    rec.Boat__c = component.get("v.boat").Id;
                    component.set("v.boatReview", rec);
                    console.log("Record template initialized: " + rec.sobjectType);
                }
            })
        );
    }
})

============================
Boatselected

<aura:event type="APPLICATION" description="event template">
    <aura:attribute name="boat" type="Boat__c"/>
</aura:event>

============================

BoatDetail

<aura:component implements="force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId,forceCommunity:availableForAllPageTypes"
                access="global" description="BoatDetail">
    
    <aura:attribute name="boat" type="Boat__c"/>
    <div class="Record Details">
        <lightning:card iconName="utility:anchor">
            
            <aura:set attribute="Actions">
                
                <aura:if isTrue="{!v.Event}">
                    <lightning:button label="Full Details" onclick="{!c.onFullDetails}" disabled="false" />
                    <aura:set attribute="else"> 
                        <lightning:button label="Full Details" onclick="{!c.onFullDetails}" disabled="true" />
                    </aura:set>
                </aura:if>
                
            </aura:set>
            
            <aura:set attribute="title">
                {!v.boat.Contact__r.Name}'s Boat
            </aura:set>
            
            <lightning:layout horizontalAlign="space" multipleRows="true">
                <lightning:layoutItem size="6" padding="around-small">
                    <div class="slds-p-horizontal--small">
                        <div class="boatproperty">
                            <span class="label">Boat Name:</span>
                            <span>{!v.boat.Name}</span>
                        </div>
                        <div class="boatproperty">
                            <span class="label">Type:</span>
                            <span>{!v.boat.BoatType__r.Name}</span>
                        </div>
                        <div class="boatproperty">
                            <span class="label">Length:</span>
                            <span>{!v.boat.Length__c} ft</span>
                        </div>
                        <div class="boatproperty">
                            <span class="label">Est. Price:</span>
                            <span><lightning:formattedNumber value="{!v.boat.Price__c}" style="currency" currencyCode="USD"/>
                            </span>
                        </div>
                        <div class="boatproperty">
                            <span class="label">Description:</span>
                            <ui:outputRichText value="{!v.boat.Description__c}" />
                        </div>
                    </div>
                    
                </lightning:layoutItem>
                
                <lightning:layoutItem size="6" padding="around-small">
                    
                    <lightning:button variant='neutral' label='Full Details' onclick='{!c.onFullDetails}'/>
                    
                    <div class="imageview" style="{!'background-image:url(\'' + v.boat.Picture__c + '\')'}" />
                </lightning:layoutItem>
                
                
            </lightning:layout>
        </lightning:card>
    </div>
</aura:component>

controller.js


({
    
    onFullDetails : function (component, event, helper) {
        var boatrec  = component.get("v.boat");
        var navEvt = $A.get("e.force:navigateToSObject");
        navEvt.setParams({
            "recordId": boatrec.Id
            
        });
        navEvt.fire();
    }
})

css

.THIS.label {
    font-weight: bold;
    display: block;
}

.THIS.boatproperty {
    margin-bottom: 3px;
}

.THIS .imageview {
    background-repeat: no-repeat;
    background-size: contain;
    height: 200px;
    margin: 2px;
}

=======================================================

BoatDetails

<aura:component implements="force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId,forceCommunity:availableForAllPageTypes"
                access="global" description="BoatDetails">
    
    <aura:handler event="c:BoatSelected" action="{!c.onBoatSelected}"/>
    <aura:handler name="boatReviewAdded" event="c:BoatReviewAdded" action="{!c.onBoatReviewAdded}"/>
    
    <aura:attribute name="boat" type="Boat__c"/>
    <aura:attribute name="id" type="Id"/>
    <aura:attribute name="recordLoadError" type="String"/>
    <aura:attribute name="selTabId" type="Id"/>
    
    hi {!v.id}
    <force:recordData aura:id="service"
                      recordId="{!v.id}"
                      fields="Id,Name,Description__c,Price__c,Length__c,
                              Contact__r.Name,Contact__r.Email,Contact__r.HomePhone,
                              BoatType__r.Name,Picture__c"
                      targetFields="{!v.boat}"
                      targetError="{!v.recordLoadError}"
                      recordUpdated="{!c.onRecordUpdated}"
                      mode="VIEW" /> 
    
    
    <aura:if isTrue="{! !(empty(v.boat))}"> 
        <lightning:tabset variant="scoped" selectedTabId="{!v.selTabId}" aura:id="detailstab">
            <lightning:tab label="Details" id="details">
                <c:BoatDetail boat="{!v.boat}"/>
            </lightning:tab>
            <lightning:tab label="Reviews" id="boatreviewtab">
                <c:BoatReviews boat="{!v.boat}"/>
            </lightning:tab>
            <lightning:tab label="Add Review" id="addReview">
                <c:AddBoatReview boat="{!v.boat}"/>
            </lightning:tab>
        </lightning:tabset>
    </aura:if> 
</aura:component>

Controller.js

({
    onBoatSelected : function(component, event, helper) {
        var boatIdtopass =  event.getParam("boat");
        alert("inside the boatDetails Controller  " +boatIdtopass.Id);
        component.set("v.id",boatIdtopass.Id);
        //component.set("v.boat", boatIdtopass);
        //component.find("service").reloadRecord() ;
        var tempRec = component.find("service");
        tempRec.set("v.recordId", boatIdtopass.Id);
        tempRec.reloadRecord();
    },
    onBoatReviewAdded : function(component, event, helper) {
        console.log("Event received");
        component.set("v.selectedTabId", "boatreviewtab");
        //var compTorefresh =  component.get("v.toreviewBoat");
        //compTorefresh.refresh();
    },
    onRecordUpdated : function(component, event, helper) {
        var compTorefresh =  component.get("v.toreviewBoat");
        //compTorefresh.refresh();
    }
})

=================================================================================================

BoateSelect

<aura:event type="COMPONENT" description="Event template" >
	<aura:attribute name="boatId" type="String" /> 

</aura:event>

==========================================================

BoatTile

<aura:component implements="force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId,forceCommunity:availableForAllPageTypes,force:lightningQuickAction"
                access="global" description="BoatTile">
    
    <aura:attribute name="boat" type="Boat__c" />
    <aura:attribute name="selected" type="Boolean" default="false"/>
    
    <aura:registerEvent name="boatclkevent" type="c:BoatSelect"/>
    <aura:registerEvent name="PlotMapMarker" type="c:PlotMapMarker" />
    <aura:registerEvent name="BoatSelected" type="c:BoatSelected"/>
    
        <lightning:button class="{!v.selected  == 'true' ? 'tile selected' : 'tile'}"
                          onclick="{! c.onBoatClick }">
            <div style="{!'background-image:url(\'' + v.boat.Picture__c + '\')'}" class="innertile">
                <div class="lower-third">
                    <h1 class="slds-truncate">{!v.boat.Contact__r.Name}</h1> 
                </div>
            </div>
        </lightning:button>
    
    
</aura:component>

Controller.js

({
    onBoatClick : function(component, event, helper) {
        var ev = component.getEvent("boatclkevent");
        var btId = component.get("v.boat");
        ev.setParams({"boatId" : btId.Id});
        ev.fire();
        
        //var ev = component.getEvent("boatTileselected");
        var selbtid = component.get("v.boat");
        alert("We are firing events to display Boat Details " +selbtid.Id);
        var appEvent = $A.get("e.c:BoatSelected");
        appEvent.setParams({
            "boat": selbtid
        });
        appEvent.fire();      
        
        
        var plotmap = component.get("v.boat");
        var createEvent = $A.get("e.c:PlotMapMarker");
        createEvent.setParams({'sObjectId' : plotmap.id});
        createEvent.fire();
        
    }
})

css

.THIS.tile {
    position:relative;
    display: inline-block;
    width: 190px;
    height: 220px;
    padding: 1px !important;
}

.THIS .innertile {
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    width: 100%;
    height: 100%;


}

.THIS .lower-third {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    color: #FFFFFF;
    background-color: rgba(0, 0, 0, .4);
    padding: 6px 8px;
}

.THIS.selected {
    border: 3px solid rgb(0, 112, 210);
}

============================================================

Application

<aura:application extends="force:slds" >
    
    
    <lightning:layout >
        <lightning:layoutItem size="8"><c:BoatSearch /> </lightning:layoutItem>
        <lightning:layoutItem size="2"><c:BoatDetails /> </lightning:layoutItem>
        <lightning:layoutItem size="2"><c:Map /> </lightning:layoutItem>
    </lightning:layout>
   
    
</aura:application>

=================================================================

BoatSearch

<aura:component implements="force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId"
                			access="global"  description="BoatSearch">
    
    <aura:handler name="formsubmit" event="c:FormSubmit" action="{!c.onFormSubmit}"/>  
    <!-- <aura:handler name="init" value="{!this}" action="{!c.doinit}"/> -->
    
    <lightning:card title="Find a Boat" >
       <c:BoatSearchForm />
    </lightning:card>
   
     <div id='gapofComp' style=''/>  
    
    <lightning:card title="Matching Boats" >
        <c:BoatSearchResults aura:id="childCmp" />    <!-- aura:id="childCmp" -->
    </lightning:card>
   
</aura:component>

Controller.js

({
	onFormSubmit : function(component, event, helper) {
        var formData = event.getParam("formData");
        console.log("getting the formData " +formData);
        //var boatTypeId = formData.boatTypeId;
        //alert("getting the boat id " +boatTypeId);
        var childCmp = component.find("childCmp");
        //console.log("getting the boattypeId " +boatTypeId);
		var auraMethodResult = childCmp.search(formData);
        console.log("auraMethodResult: " + auraMethodResult);

	}
})

=============================================================================

BoatSearchResults

<aura:component controller="BoatSearchResults" implements="force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId" access="global" >
    
    <aura:attribute name="boats" type="Boat__c[]" /> 
    <aura:attribute name="selectedBoatId" type="String" /> 
    
    <aura:handler name="boatclkevent" event="c:BoatSelect" action="{!c.onBoatSelect}"/>
    
    <aura:method name="search" action="{!c.doSearch}" description="Sample method with parameters"> 
        <aura:attribute name="boatTypeId" type="Id"/>
    </aura:method>
    
    <div>
        <lightning:layout multipleRows="true">
            
            <aura:if isTrue="{!v.boats.length > 0}">
                
                <aura:iteration items="{!v.boats}" var="boat">
                    <lightning:layoutItem flexibility="grow" class="slds-m-right_small">
                        <c:BoatTile boat="{!boat}"  selected="{!v.selectedBoatId == boat.id ? true : false}" />
                    </lightning:layoutItem>
                </aura:iteration>
                
                <aura:set attribute="else">
                    <div class="slds-align_absolute-center">
                        No boats found
                    </div>
                </aura:set>
            </aura:if> 
        </lightning:layout>
    </div>
    
</aura:component>

Controller.js

({
    doSearch : function(component, event, helper) {
        var params = event.getParam("arguments");
        if (params) {
            var param1 = params.boatTypeId;
            alert("param to get " +param1);
            //component.set("v.boatTypeId", param1);
            alert("final param key to search " +param1);
			helper.onSearch(component,param1);
        }
    },
    
    onBoatSelect : function(component, event, helper) {
        component.set("v.selectedBoatId",event.getParam("boatId"));
    }
})

helper.js

({
    onSearch : function(component,param1) {
        //alert("got the final id to search  " +param1);
        var action = component.get("c.getBoats");
        var btid = component.get("v.boatTypeId");
        //alert("boatTypeId  " + btid);
        action.setParams({
            "boatTypeId": param1
        });
        action.setCallback(this, function(response){
            var state = response.getState();
            if (state === "SUCCESS") {
                alert("inside success of apex method");
                var temp = response.getReturnValue();
                console.log("all boat records  " +temp);
                //alert(JSON.parse(JSON.stringify(temp)));
                component.set("v.boats", temp);
            }
        });
        $A.enqueueAction(action); 
    }
})

Apex

public class BoatSearchResults {
    @AuraEnabled
    public static List<Boat__c> getBoats(String boatTypeId) {
        if(boatTypeId != '')  {
            return [SELECT id, BoatType__c, picture__c, name,contact__r.Name
                    FROM Boat__c
                    WHERE BoatType__c =:boatTypeId];
        } else {
            return [SELECT id, BoatType__c, picture__c, name,contact__r.Name
                    FROM Boat__c];
        }
    }
   
    @AuraEnabled
    public static List<BoatType__c> getBoatTypes()
    {
        return [SELECT Id, Name from BoatType__c ORDER BY Name];
    }
}

====================================================================
BoatSearchForm

<aura:component controller="BoatSearchResults"
                implements="force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId" access="global" >
    
    <aura:attribute name="options" type="String[]" />
    <aura:attribute name="selectedValue" type="String" default="Red"/>
    <!-- <aura:handler name="init" value="{!this}" action="{!c.loadOptions}" /> -->
    
    
    <aura:registerEvent name="launchNewBoatForm" type="c:launchNewBoatForm"/>
    <aura:registerEvent name="formsubmit" type="c:FormSubmit"/> 
    <!-- Handle component init in a client-side controller -->
    <aura:handler name="init" value="{!this}" action="{!c.doInit}"/>
    <aura:handler name="launchNewBoatForm" event="c:launchNewBoatForm" action="{!c.handleNewBoatForm}"/>
    
    <!-- dynamically load the BoatTypes -->
    <aura:attribute name="BoatTypes" type="BoatType__c[]" />
    <aura:attribute name="selectedType" type="String" default="foo"/>
    <aura:attribute name="renderNew" type="Boolean" default="true"/>
    
    <article class="slds-card slds-m-bottom_large">
        <div class="slds-media__body">
            <div >
                
                <lightning:layout horizontalAlign="center" verticalAlign="end">
                    
                    <lightning:layoutItem padding="horizontal-medium" >
                        <!-- Create a dropdown menu with options -->
                        <lightning:select aura:id="boatTypes" label="BoatNames" name="selectType"
                                          onchange="{!c.handleChange}">
                            <option value="">All Types</option>
                            <aura:iteration items="{!v.BoatTypes}" var="boatType">
                                <option value="{!boatType.Id}" text="{!boatType.Name}"/>
                            </aura:iteration>
                        </lightning:select>
                    </lightning:layoutItem>
                    
                    
                    <lightning:layoutItem >
                        <div class="slds-button-group" role="group">
                            <lightning:button class="slds-button" variant="brand" label="Search" onclick="{!c.onFormSubmit}"/>
                            
                            <!--
            The form’s controller checks whether the event.force:createRecord event
            is supported by a standalone app and either shows or hides the New button
            according to best practices.
            -->
                            
                            <aura:if isTrue="{!v.renderNew}">
                                <lightning:button class="slds-button" variant="neutral" label="New" onclick="{!c.newBoat}"/>
                            </aura:if>
                        </div>
                    </lightning:layoutItem>
                    
                </lightning:layout>
            </div>
        </div>
    </article>
    
</aura:component>

Controller.js

({
    doInit : function(component, event, helper){

        helper.loadBoatTypes(component);
    },

    handleChange : function(component, event, helper){
        console.log(component.find("boatTypes").get("v.value"));
        component.set("v.selectedType", component.find("boatTypes").get("v.value"));
    },

    onFormSubmit : function(component, event, helper){
        var selectedType = component.get("v.selectedType");
        console.log("Search button pressed " + selectedType);
        var Boatid = component.getEvent("formsubmit");
        Boatid.setParams({"formData": selectedType});
        Boatid.fire();
    },

    newBoat : function(component, event, helper){
        var boatTypeId = component.get("v.selectedType");
        console.log("New button pressed " + boatTypeId);
        var requestNewBoat = component.getEvent("launchNewBoatForm");
        requestNewBoat.setParams({"boatTypeId": boatTypeId});
        requestNewBoat.fire();
    },

    handleNewBoatForm: function(component, event, helper){
        console.log("handleNewBoatForm handler called.")
        var boatTypeId = component.get("v.selectedType");

        console.log(boatTypeId);
        var createNewBoat = $A.get("e.force:createRecord");
        createNewBoat.setParams({
            "entityApiName": "Boat__c",
        })
        if(! boatTypeId==""){
            createNewBoat.setParams({
                "defaultFieldValues": {'BoatType__c': boatTypeId}
           })
        }
        createNewBoat.fire();
    },
    //more handlers here
})

helper.js

({
    loadBoatTypes: function(component){
    //create the action
            console.log("Helper started");
            var action = component.get("c.getBoatTypes");

            //add the callback behavior for when the response is received
            action.setCallback(this,function(response){
            var state = response.getState();
            if (state === "SUCCESS"){
                component.set("v.BoatTypes", response.getReturnValue());
                console.log(response.getReturnValue());
                }
                else {
                console.log("Failed with state: " + state);
                }
            });

            //send action off to be executed
            $A.enqueueAction(action);
       },
})

Apex

public class BoatSearchResults {
    @AuraEnabled
    public static List<Boat__c> getBoats(String boatTypeId) {
        if(boatTypeId != '')  {
            return [SELECT id, BoatType__c, picture__c, name,contact__r.Name
                    FROM Boat__c
                    WHERE BoatType__c =:boatTypeId];
        } else {
            return [SELECT id, BoatType__c, picture__c, name,contact__r.Name
                    FROM Boat__c];
        }
    }
   
    @AuraEnabled
    public static List<BoatType__c> getBoatTypes()
    {
        return [SELECT Id, Name from BoatType__c ORDER BY Name];
    }
}

======================================================================
Map

<aura:component implements="flexipage:availableForAllPageTypes" access="global" >
    
    <aura:attribute name="width"  type="String" default="100%" />
    <aura:attribute name="height" type="String" default="200px" />
    <aura:attribute name="location" type="SObject"/>
    <aura:attribute name="jsLoaded" type="boolean" default="false"/>
    <aura:attribute access="private" name="leafletMap" type="Object" />
    
    <aura:handler event="c:PlotMapMarker" action="{!c.onPlotMapMarker}"/>
    
    <ltng:require styles="{!$Resource.Leaflet + '/leaflet.css'}" 
                  scripts="{!$Resource.Leaflet + '/leaflet-src.js'}"
                  afterScriptsLoaded="{!c.jsLoaded}" /> 
    
    
    <lightning:card title="Current Boat Location" >
        <div aura:id="map" style="{!'width: ' + v.width + '; height: ' + v.height}">
            <div style="width:100%; height:100%" class="slds-align_absolute-center">Please make a selection</div>
        </div>
    </lightning:card>
    
    
    
</aura:component>

controller.js

({
    jsLoaded: function(component) {
        component.set("v.jsLoaded", true);
    },
    onPlotMapMarker: function(component, event, helper) {
        var id = event.getParam('sObjectId');
        var latitude = event.getParam('lat');
        var longitude = event.getParam('long');
        var label = event.getParam('label');
        component.set("v.location", "{'latitude' : latitude, 'longitude' : longitude}");

        
        var leafletMap = helper.getLeafletMap(component, latitude, longitude);
        L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}', {
            attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(leafletMap);
        
        L.marker([latitude, longitude]).addTo(leafletMap)
        .bindPopup(label)
        .openPopup();
    }
})

helper.js

({
	getLeafletMap : function(component, latitude, longitude) {
		var leafletMap = component.get('v.leafletMap');
		
		if (!leafletMap) {
	    	var mapContainer = component.find('map').getElement(); 
		    leafletMap = L.map(mapContainer, {zoomControl: false, tap: false})
		    	.setView([latitude, longitude], 13);
		    component.set('v.leafletMap', leafletMap);
		}

		return leafletMap;
	}
})

css 

.THIS {
    width: 100%;
    height: 100%;
    
}

=========================================================================================

